/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.buw.i2p;


import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.ChoiceBox;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.canvas.*;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;

public class App extends Application {

    @Override
//die folgende Mainfunktion, f체hrt das Programm aus
// hier werden auch alle Objekte erstellt und die Oberfl채che designt
    public void start(Stage stage) throws IOException {

        Mandala mandala = new Mandala();

//die Hintergr체nde werden aus resources geladen

        System.out.println("Working Directory = " + System.getProperty("user.dir"));
        ImageView generator_image = new ImageView("Generator.jpg");
        ImageView start_image = new ImageView("Start.jpg");
        Font font = Font.font("Century", FontWeight.BOLD, 20);

        Button begin = new Button("Beginne");
        begin.setFont(font);
        begin.setPrefSize(200, 80);

        Button generate = new Button("Generiere");
        {
            generate.setFont(font);
            generate.setPrefSize(229, 30);
        }

        Button save = new Button("Speichern");
        {
            save.setFont(font);
            save.setPrefSize(229, 30);
        }

//es wird ein canvas und ein BufferedImage geladen

        Canvas canvas = new Canvas(700, 700);
        GraphicsContext gc_canvas = canvas.getGraphicsContext2D();


//Label werden erstellt
        Font small_font = Font.font("Arial", FontWeight.BOLD, 15);
        Label first_prop = new Label("Formen");
        first_prop.setFont(small_font);
        Label second_prop = new Label("Segmente");
        second_prop.setFont(small_font);

        Image image = new Image("file:resources/Generator.jpg");

//die ChoiceBoxen werden erstellt
        ChoiceBox<String> first_item = new ChoiceBox<String>();
        {
            first_item.getItems().addAll("Kreis", "Quadrat", "Dreieck");
            first_item.setValue("Kreis");
        }


        ChoiceBox<Integer> second_item = new ChoiceBox<Integer>();
        {
            second_item.getItems().addAll(4,5,6,7,8,9,10,11,12);
            second_item.setValue(4);
        }

//die Objekte werden in VBoxen und HBoxen sortiert und in der Oberfl채che platziert
        VBox vBox_start = new VBox();
        {
            vBox_start.getChildren().addAll(begin);
            vBox_start.setAlignment(Pos.BOTTOM_CENTER);
            vBox_start.setPadding(new Insets(0, 0, 150, 0));
        }

        HBox hBox_first = new HBox(15, first_prop, first_item);
        {
            hBox_first.setAlignment(Pos.BOTTOM_LEFT);
            hBox_first.setPadding(new Insets(0, 0, 0, 10));
        }

        HBox hBox_second = new HBox(15, second_prop, second_item);
        {
            hBox_second.setAlignment(Pos.BOTTOM_LEFT);
            hBox_second.setPadding(new Insets(0, 0, 0, 10));
        }

        VBox vBox_save_generate = new VBox(10, generate, save);
        {
            vBox_save_generate.setAlignment(Pos.BOTTOM_RIGHT);
            vBox_save_generate.setPadding(new Insets(0, 2, 0, 0));
        }

        VBox vBox_leftside = new VBox(200, hBox_first, hBox_second, vBox_save_generate);
        {
            vBox_leftside.setAlignment(Pos.BOTTOM_LEFT);
            vBox_leftside.setPadding(new Insets(0, 0, 25, 0));
        }

        HBox hBox_desktop = new HBox(5, vBox_leftside, canvas);
        {
            hBox_desktop.setAlignment(Pos.BOTTOM_CENTER);
            hBox_desktop.setPadding(new Insets(0, 0, 25, 0));
        }

//alles wird in StackPanes gestapelt
        StackPane start_pane = new StackPane(start_image, vBox_start);
        Scene start = new Scene(start_pane, 950, 750);
        StackPane quellenpane = new StackPane(generator_image, hBox_desktop);
        Scene generator = new Scene(quellenpane, 950, 750);

//hier werden die EventHandler der Buttons erstellt

        EventHandler<ActionEvent> handler_begin  = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent e) {
                stage.setScene(generator);
            }
        };//dieser Eventhandler zeigt die Generatorseite, wird vom Beginnenbutton aufgerufen

        EventHandler<ActionEvent> eventHandlerGenerate  = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent e) {

                gc_canvas.setFill(Color.WHITE);
                gc_canvas.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());

                String first_object = first_item.getValue();
                String second_object = first_item.getValue();

                mandala.clear();
                mandala.generate(gc_canvas, second_item.getValue(), first_object);

            }
        };//mit diesem Button wird ein Mandala generiert und auf das Canvas gezeichnet und in die "Datei"

        EventHandler<ActionEvent> eventHandlerSave  = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent e) {

                BufferedImage bufferedImage = new BufferedImage(700,700,BufferedImage.TYPE_INT_ARGB);
                Graphics2D gc_buffer = bufferedImage.createGraphics();
                gc_buffer.setColor(new java.awt.Color(255, 255, 255));
                gc_buffer.fillRect(0, 0, 700, 700);

                mandala.save(gc_buffer);

                gc_buffer.dispose();

                try{
                    File file = new File("mandala_made_by_generator.png");
                    ImageIO.write(bufferedImage, "png", file);
                } catch (IOException z) {
                    z.printStackTrace();
                }

            }
        };//das Mandala wird gespeichert

        begin.setOnAction(e -> {stage.setScene(generator);});
        save.setOnAction(eventHandlerSave);
        generate.setOnAction(eventHandlerGenerate);

        stage.setScene(start);
        stage.show(); // Display the stage

    }
    public static void main(String[] args) {
        launch();
    }

}